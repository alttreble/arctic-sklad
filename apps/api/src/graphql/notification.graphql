enum NotificationSeverity {
  ERROR
  WARNING
  INFO
}

enum NotificationConditionOperator {
  """
  Attribute is of type date and is set number of months before the current time.
  If the attribute is an array, all of the dates in the list should be before the target date
  to cause the condition to be true.
  """
  TIME_BEFORE_EVERY
  """
  Attribute is of type date and is defined number of months before the current time.
  If the attribute is an array, any one of the dates in the list should be before the target date
  to cause the condition to be true.
  """
  TIME_BEFORE
  "Less than"
  LT
  "Less than or equal"
  LTE
}

type Notification {
  id: Int!
  type: String!
  title: String!
  description: String
  severity: NotificationSeverity
}

type NotificationListener {
  item: Item!
  "The severity of the generated notification"
  severity: NotificationSeverity!
  "A list of condition that need to be met in order to create a notification"
  conditions: [NotificationCondition!]!
  "The schedule at which the notification check will be run represented in cron notation. Defaults to once a day"
  schedule: String
  type: String!
  title: String!
  description: String
}

extend type Item {
  notifications: [Notification]
  notificationListeners: [NotificationListener]
}

type NotificationCondition {
  attribute: String!
  operator: NotificationConditionOperator!
  value: String!
}

input NotificationConditionInput {
  attribute: String!
  operator: NotificationConditionOperator!
  value: String!
}

input RegisterNotificationListenerInput {
  itemId: Int!
  "The severity of the generated notification"
  severity: NotificationSeverity! = INFO
  "A list of condition that need to be met in order to create a notification"
  conditions: [NotificationConditionInput]!
  "The schedule at which the notification check will be run represented in cron notation. Defaults to once a day"
  schedule: String = "0 0 * * *"
  type: String!
  title: String!
  description: String
}

input NotificationListenersInput {
  itemId: Int!
}

input UpdateNotificationListenerInput {
  itemId: Int!
  "The severity of the generated notification"
  severity: NotificationSeverity = INFO
  "A list of condition that need to be met in order to create a notification"
  conditions: [NotificationConditionInput]
  "The schedule at which the notification check will be run represented in cron notation. Defaults to once a day"
  schedule: String = "0 0 * * *"
  type: String!
  title: String
  description: String
}

input UnregisterNotificationListenerInput {
  itemId: Int!
  type: String!
}

extend type Query {
  notificationListeners(input: NotificationListenersInput!): [NotificationListener]!
}

extend type Mutation {
  registerNotificationListener(input: RegisterNotificationListenerInput!): NotificationListener!
  unregisterNotificationListener(input: UnregisterNotificationListenerInput!): NotificationListener
  updateNotificationListener(input: UpdateNotificationListenerInput!): NotificationListener!
}
