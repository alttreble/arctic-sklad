scalar Cursor

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

type Item {
    id: Int!
    createdAt: String!
    updatedAt: String!
    name: String!
    genericName: String
    description: String
    totalQuantity: Int!
    hasExpiredEntry: Boolean!
    entries: [ItemEntry]!
    uom: UOM!
}

type ItemEntry {
    id: Int!
    createdAt: String!
    updatedAt: String!
    expirationDate: String
    hasExpired: Boolean
    quantity: Int!
    item: Item!
}

type UOM {
    id:   Int!
    name: String!
    namePlural: String!
    items: [Item]
}

type ItemEdge {
    node: Item
    cursor: Cursor!
}

type UOMEdge {
    node: UOM
    cursor: Cursor!
}

type ItemConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ItemEdge]
}

type UOMConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UOMEdge]
}

enum ItemOrderField {
    id
    createdAt
    updatedAt
    name
}

enum OrderDirection {
    asc
    desc
}

input ItemOrderByInput {
    direction: OrderDirection = asc
    field: ItemOrderField! = id
}

input AddItemInput {
    name: String!
    genericName: String
    description: String
    uomId: Int!
}

input UpdateItemInput {
    id: Int!
    name: String
    genericName: String
    description: String
    uomId: Int
}

input ItemFiltersInput {
    name: String
    expirationDate: String
    notifications: [String]
}

input UomFiltersInput {
    name: String
}

input DefineUOMInput {
    name: String!
    namePlural: String!
}

input CreateEntryOnItemInput {
    itemId: Int!
    quantity: Int!
    expirationDate: String
}

input UpdateItemEntryInput {
    id: Int!
    quantity: Int!
    expirationDate: String
}

input DeleteItemInput {
    id: Int!
}

type Query {
    item(id: Int!): Item

    items(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: ItemOrderByInput
        filter: ItemFiltersInput
    ): ItemConnection!

    uoms(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        filter: UomFiltersInput
    ): UOMConnection!
}

type Mutation {
    addItem(input: AddItemInput!): Item!
    updateItem(input: UpdateItemInput!): Item!
    deleteItem(input: DeleteItemInput!): Item!
    defineUOM(input: DefineUOMInput!): UOM!
    createEntryOnItem(input: CreateEntryOnItemInput!): ItemEntry!
    updateItemEntry(input: UpdateItemEntryInput!): ItemEntry!
}
